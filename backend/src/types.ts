/**
 * @fileoverview Type definitions.
 * Check out the database schema in schema.ts
 * @see {@link src/schema.ts}
 */

import { Context, Hono } from "hono";
import { Bindings } from "./platform";
import z from "zod";

type AllOrNothing<T> = T | { [K in keyof T]?: never };
type AzureCosmosDBSecretEnv = AllOrNothing<{
    readonly SECRET_AZURE_COSMOSDB_CONNECTION_STRING: string;
    readonly SECRET_AZURE_COSMOSDB_DATABASE_NAME: string;
    readonly SECRET_AZURE_COSMOSDB_CONTAINER_NAME: string;
}>;

type S3SecretEnv = AllOrNothing<{
    readonly SECRET_S3_ACCESS_KEY: string;
    readonly SECRET_S3_SECRET_KEY: string;
    readonly SECRET_S3_BUCKET_NAME: string;
    readonly SECRET_S3_REGION: string;
    readonly SECRET_S3_ENDPOINT: string;
}>;
/**
 * Environment secrets required for the application.
 * These should be provided via platform-specific secret management, not environment variables.
 */
export type RuntimeSecret = {
    readonly SECRET_CLERK_SECRET_KEY: string;
} & S3SecretEnv &
    AzureCosmosDBSecretEnv;
/**
 * Environment variables required for the application.
 * These can be provided via environment variables or platform-specific configuration.
 * It is not-so secure to store sensitive information here.
 */
export type RuntimeVariable = {
    readonly ENV_CLERK_PUBLIC_KEY: string;
};

export const UserSchema = z.object({
    /**
     * Display name of the user.
     * It can be any string as far as there is no HTML things.
     */
    name: z.string().min(1).max(20).describe("Display name of the user"),
    /**
     * It is still internal user ID, generated by the auth provider.
     * It is used on authentication and authorization.
     * Internal logic is not based on this value.
     */
    authUid: z
        .string()
        .min(1)
        .max(100)
        .describe("Auth provider user ID, seperate from internal ID"),
    /**
     * Role of the user for authorization.
     */
    role: z.string().describe("Role of the user for authorization"),
});

export type UserType = z.infer<typeof UserSchema>;

type AuthenticatedContext = {
    Variables: { user: UserType };
} & Context;

export type AuthenticatedBindings = Bindings & {
    Variables: AuthenticatedContext["Variables"];
};
