/**
 * Secure Storage Manager for API keys
 * Handles encryption, storage, and retrieval of sensitive data
 */

import { encryptText, decryptText, generateMasterPassword } from "./crypto.js";
import { loadFromBrowserStorage, saveToBrowserStorage } from "../storage.js";
import { t } from "../i18n.js";

const STORAGE_KEYS = {
  ENCRYPTED_API_CONFIGS: "personaChat_encryptedApiConfigs_v1",
  MASTER_PASSWORD_HINT: "personaChat_masterPasswordHint_v1",
  SESSION_MASTER_PASSWORD: "personaChat_sessionMasterPassword", // sessionStorage only
  ENCRYPTION_ENABLED: "personaChat_encryptionEnabled_v1",
};

/**
 * Secure Storage Manager class
 */
export class SecureStorageManager {
  constructor() {
    this.masterPassword = null;
    this.encryptionEnabled = false;
  }

  /**
   * Initialize secure storage - always enabled
   * @returns {Promise<boolean>} - Whether encryption is enabled
   */
  async initialize() {
    try {
      // Check if this is first time setup
      const hasExistingEncryption = await loadFromBrowserStorage(
        STORAGE_KEYS.ENCRYPTION_ENABLED,
        false,
      );

      if (!hasExistingEncryption) {
        // First time setup - enable encryption automatically
        const autoPassword = this.generateMasterPassword();
        await this.setupEncryption(
          autoPassword,
          t("secureStorage.autoGeneratedHint"),
        );
      } else {
        // Existing setup - restore from session or regenerate
        this.encryptionEnabled = true;
        this.masterPassword = sessionStorage.getItem(
          STORAGE_KEYS.SESSION_MASTER_PASSWORD,
        );

        if (!this.masterPassword) {
          // Session expired, regenerate password (user won't notice)
          const autoPassword = this.generateMasterPassword();
          this.masterPassword = autoPassword;
          sessionStorage.setItem(
            STORAGE_KEYS.SESSION_MASTER_PASSWORD,
            autoPassword,
          );
        }
      }

      return true;
    } catch (error) {
      console.error("Failed to initialize secure storage:", error);
      return false;
    }
  }

  /**
   * Setup encryption with master password
   * @param {string} masterPassword - Master password for encryption
   * @param {string} [hint] - Optional hint for the password
   * @returns {Promise<boolean>} - Success status
   */
  async setupEncryption(masterPassword, hint = "") {
    try {
      // Test encryption with a dummy value
      await encryptText("test", masterPassword);

      this.masterPassword = masterPassword;
      this.encryptionEnabled = true;

      // Store master password in session (temporary)
      sessionStorage.setItem(
        STORAGE_KEYS.SESSION_MASTER_PASSWORD,
        masterPassword,
      );

      // Store hint and encryption flag
      saveToBrowserStorage(STORAGE_KEYS.MASTER_PASSWORD_HINT, hint);
      saveToBrowserStorage(STORAGE_KEYS.ENCRYPTION_ENABLED, true);

      return true;
    } catch (error) {
      console.error("Failed to setup encryption:", error);
      throw new Error(t("secureStorage.setupEncryptionFailed"));
    }
  }

  /**
   * Save encrypted API configurations
   * @param {Object} apiConfigs - API configurations object
   * @returns {Promise<void>}
   */
  async saveApiConfigs(apiConfigs) {
    if (!this.masterPassword) {
      // console.warn(t("secureStorage.noMasterPasswordForEncryption"));
      return;
    }

    try {
      const jsonString = JSON.stringify(apiConfigs);
      const encrypted = await encryptText(jsonString, this.masterPassword);
      saveToBrowserStorage(STORAGE_KEYS.ENCRYPTED_API_CONFIGS, encrypted);
    } catch (error) {
      console.error("Failed to save encrypted API configs:", error);
      throw new Error(t("secureStorage.saveApiConfigsFailed"));
    }
  }

  /**
   * Load and decrypt API configurations
   * @returns {Promise<Object|null>} - Decrypted API configurations
   */
  async loadApiConfigs() {
    if (!this.masterPassword) {
      // console.warn(t("secureStorage.noMasterPasswordForDecryption"));
      return {};
    }

    try {
      const encrypted = await loadFromBrowserStorage(
        STORAGE_KEYS.ENCRYPTED_API_CONFIGS,
        null,
      );

      if (!encrypted) {
        return {};
      }

      const jsonString = await decryptText(encrypted, this.masterPassword);
      return JSON.parse(jsonString);
    } catch (error) {
      console.error(
        t("secureStorage.loadApiConfigsFailed"),
        error,
      );
      return {};
    }
  }

  /**
   * Get password hint
   * @returns {Promise<string>} - Password hint
   */
  async getPasswordHint() {
    return await loadFromBrowserStorage(STORAGE_KEYS.MASTER_PASSWORD_HINT, "");
  }

  /**
   * Generate a secure master password
   * @returns {string} - Generated master password
   */
  generateMasterPassword() {
    return generateMasterPassword();
  }
}

// Export singleton instance
export const secureStorage = new SecureStorageManager();
